
start phase startPhase {
    info = "The starting point",
    uid = RT,

    actions {
        pass scanAndParse;
        semantic;
        unpack_lifetimes;
        dynamic_backend;
        static_backend;
        phase_driver;
        gen_dot;
        print;
        opts;
    }
};

cycle opts {
    info = "Do non existing optimisations.",
    uid = OPT,

    actions {
        pass doOpts;
    }
};

phase semantic {
    info = "Main part",
    uid = SEA,

    actions {
        buildSymbolTable;
        checkExistance;
        unwrapSetExpr;
        reachability;
    }
};

phase unpack_lifetimes {
    info = "Unpack lifetime into their action IDS",
    uid = ULT,

    actions {
        traversal assign_id_to_action {
            uid = AITA,
            nodes = {ast, iactions }
        };

        traversal map_id_to_lifetime {
            uid = MITL,
            nodes = {ast, inode, iactions, ilifetime, lifetime_range, id}
        };
    }
};


phase phase_driver {
    info = "Generate the missing parts of the phase driver",

    actions {
        gen_action_array_header;
        gen_ids_tables;
        gen_action_array;
        gen_gate_header;
    }
};

phase dynamic_backend {
    info = "Generating part for the dynamic backend",
    uid = DDB,
    gate = backendIsDynamic,

    actions {
        dynamic_gen_ast;
        pass dynamic_start_enum_header;
        dynamic_genEnum;
        dynamic_genEnumValues;
        dynamic_gen_trav_data;
        pass dynamic_start_table_gen;
        dynamic_genTravVtable;
        dynamic_genPassTable;
        dynamic_genSystemTraversals;
        dynamic_genTravTable;
        dynamic_genTravDataTables;
        dynamic_genActionsHeader;
        dynamic_genCopyTraversal;
        dynamic_genFreeTraversal;
        dynamic_genCheckTraversal;
        dynamic_gen_user_files;
    }
};

phase static_backend {
    info = "Generating part for the static backend",
    uid = STB,
    gate = backendIsStatic,

    actions {
        static_gen_ast;
    }
};

phase static_gen_ast {
    actions {
        traversal static_gen_node_structs {
            uid = sgns,
            nodes = {ast, inode, child, attribute, inodeset, setliteral}
        };
    }
};

phase dynamic_gen_trav_data {
    info = "Generate the trav data requirements.",
    uid = DGTD,

    actions {
        pass dynamic_start_trav_data;
        dynamic_genTravDataStructs;
        dynamic_genTravDataUnion;
        dynamic_genTravDataGetters;
        dynamic_genTravDataCtorsHeader;
        pass dynamic_switch_trav_data;
        dynamic_genTravDataCtors;
    }
};

phase dynamic_gen_ast {
    info = "Generate the required files for managing user nodes and AST manipulation",
    uid = DGA,

    actions {
        pass dynamic_start_ast_header;
        dynamic_genNodeStructs;
        dynamic_genNodeMacros;
        dynamic_genNodeInitFunctions;
        dynamic_genNodeUnion;
        pass dynamic_genBaseNode;
        pass dynamic_switch_to_ast_source;
        pass dynamic_genBaseNodeInit;
        dynamic_genNodeConstructor;
    }
};

phase dynamic_gen_user_files {
    info = "Generate base files for defenition the user needs to give.",
    uid = DGUF,
    actions {
        traversal dynamic_user_gen_passes {
            uid = DUGP,
            nodes = {
                ipass, ast
            }
        };

        traversal dynamic_user_gen_traversals {
            uid = DUGT,
            nodes = {
                ast, itraversal, inode, id
            }
        };
    }
};

traversal gen_dot {
    info = "Generate a dot diagram of the AST.",
    uid = GD,

    nodes = {inode, child, ast, inodeset, setliteral}
};

traversal dynamic_genTravDataTables {
    uid = DGTDT,
    nodes = {ast, itraversal},

    travdata = {
        unsafe fileptr file,
        int in_init_round,
        int indent
    }
};

traversal gen_gate_header {
    info = "Generate extern for gate functions",
    uid = GGH,
    nodes = {ast, iphase}

};

traversal gen_ids_tables {
    uid = GIT,

    nodes = {
        ast, iphase, iactions
    }
};

traversal gen_action_array_header {
    uid = GAAH,

    nodes = action | {ast}
};

traversal gen_action_array {
    uid = GAA,

    nodes = action | {ast}
};

traversal dynamic_genTravDataUnion {
    uid = DGTDU,
    nodes = {ast, itraversal}
};

traversal dynamic_genTravDataGetters {
    uid = DGTDG,
    nodes = {itraversal}
};

traversal dynamic_genTravDataCtorsHeader {
    uid = DGTDCH,
    nodes = {itraversal}
};

traversal dynamic_genTravDataCtors {
    uid = DGTDC,
    nodes = {itraversal, itravdata}
};

traversal dynamic_genTravDataStructs {
    uid = DGTDS,
    nodes = {itraversal, itravdata}
};

traversal dynamic_genCheckTraversal {
    uid = DGCHT,

    travdata = {
        int lifetime_target
    }
};


traversal dynamic_genFreeTraversal {
    uid = DGFT
};

traversal dynamic_genConstructorCall {
    uid = DGCC,

    nodes = {ast, inode, child, attribute}
};

traversal dynamic_genCopyTraversal {
    uid = DGCT
};

traversal dynamic_genTravActions {
    uid = DGTA,

    nodes = {ast, inode}
};

traversal dynamic_genActionsHeader {
    uid = DGAH,

    nodes = {itraversal, ipass, ast, inode, setliteral, id}
};

traversal dynamic_genSystemTraversals {
    uid = DGST,

    nodes = {ast, inode}
};

traversal dynamic_genTravTable {
    uid = DGTT,

    nodes = {ast, itraversal}
};

traversal dynamic_genPassTable {
    uid = DGPT,

    nodes = {ast, ipass}
};

traversal dynamic_genNodesForTravTable {
    uid = DGNFTT,

    nodes = {ast, inode}
};

traversal dynamic_genTravVtable {
    uid = DGTV,

    nodes = {itraversal, ast}
};

traversal dynamic_genEnumValues {
    uid = DGEV,

    nodes = {ienum, ast, id}
};

traversal dynamic_genEnum {
    uid = DGE,

    nodes = {ast, inode, itraversal, inodeset, ipass}
};

traversal dynamic_genNodeConstructor {
    uid = DGNC,
    nodes = {ast, inode, child, attribute}
};

traversal dynamic_genNodeUnion {
    uid = DGBU,

    nodes = {ast, inode}
};

traversal dynamic_genNodeInitFunctions {
    uid = DGIF,

    nodes = {ast, inode, child, attribute}
};


traversal dynamic_genNodeStructs {
    uid = DGNS,

    nodes = {ast, inode, child, attribute}
};

traversal dynamic_genNodeMacros {
    uid = DGNM,

    nodes = {ast, inode, child, attribute}
};


traversal checkExistance {
    uid = CEX
};

traversal buildSymbolTable {
    uid = BST
};

traversal unwrapSetExpr {
    uid = USE,
    nodes = setexpr | {ast}
};

traversal reachability {
    uid = RCB,

    nodes = {
        ast, setliteral, itraversal, inode, child, inodeset
    }
};

traversal setliteralInsert {
    uid = SLI,
    nodes = {
        setliteral
    },

    travdata = {
	    setliteral value,
        bool inserted
    }
};

traversal setliteralUnion {
    uid = SLU,
    nodes = {
        setliteral
    },

    travdata = {
        setliteral dst
    }
};

traversal setliteralIntersect {
    uid = SLIS,
    nodes = {
        setliteral
    },

    travdata = {
        setliteral src,
        setliteral new
    }
};

traversal setliteralDifference {
    uid = SLD,
    nodes = {
        setliteral
    },

    travdata = {
        setliteral right,
        setliteral new
    }
};

traversal setliteralContains {
    uid = SLC,
    nodes = { setliteral },
    travdata = {
        id lookup,
        bool contains
    }
};

traversal print {
    info = "Print the ast",
    uid = PRT
};


root node ast {
    children {
        iphase iphases,
        itraversal itraversals,
        ipass ipasses,
        inode inodes,
        inodeset inodesets,
        ienum enums,
        ste stable
    },
    attributes {
        int num_traversals,
        int num_nodes,
        inode root_node,
        iphase start_phase
    }
};

nodeset action = { iphase, itraversal, ipass};
nodeset link = action | {inode};

node iactions {
    children {
        iactions next
    },
    attributes {
        id reference,
        int action_id
    }
};

node iphase {
    children {
        id name { constructor },
	    id iprefix,
        id gate_func,
        iactions iactions {mandatory },
        iphase next
    },
    attributes {
        int is_start { constructor },
        int is_cycle,
        string iinfo
    }
};

node itraversal {
    children {
        id name { constructor },
        id iprefix,
        setexpr inodes,
        itravdata data,
        itraversal next
    },
    attributes {
        int index,
        string iinfo
    }
};

node ipass {
    children {
        id name { constructor },
        id iprefix,
        id target_func,
        ipass next
    },
    attributes {
        string iifno { constructor }
    }
};

node inode {
    children {
        id name { constructor, mandatory },
        inode next,
        child ichildren,
        attribute iattributes,
        ilifetime lifetimes
    },

    attributes {
        string iifno { constructor },
        int is_root,
        int index
    }
};

node inodeset {
    children {
        id name,
        setexpr expr,
        id unpacked,
        inodeset next
    },

    attributes {
        string iinfo
    }
};

enum lifetime_type {
    prefix = LT,
    values = {
        disallowed, mandatory
    }
};

node ilifetime {
    children {
        lifetime_range begin,
        lifetime_range end,
        ilifetime next
    },

    attributes {
        lifetime_type type
    }
};

node lifetime_range {
    children {
        id target
    },

    attributes {
        int action_id
    }
};

enum child_type {
    prefix = CT,
    values = {
        inode, inodeset
    }
};

node child {
    children {
        id name { constructor, mandatory },
        ilifetime lifetimes,
        child next
    },

    attributes {
        id type_reference,
        child_type type,
        int in_constructor,
        int is_mandatory
    }
};

node ste {
    children {
        ste next
    },
    attributes {
        id key,
        link value
    }
};

enum attribute_type {
    prefix = AT,
    values = {
        user, link, link_or_enum, int, string, bool, int8, int16, int32, float, double, uint, uint8, uint16, uint32
    }
};

enum setoperation_type {
    prefix = SO,
    values = {
        iunion, intersect, difference
    }
};

node setreference {
    children {
        id reference
    },

    lifetime {
        disallowed (reachability -> )
    }
};

node setliteral {
    children {
        id reference {constructor},
        setliteral left,
        setliteral right
    }
};

node setoperation {
    children {
        setexpr left {constructor},
        setexpr right {constructor}
    },
    attributes {
        setoperation_type type { constructor }
    },
    lifetime {
        disallowed (reachability ->)
    }
};

nodeset setexpr = {setoperation, setreference, setliteral};

node itravdata {
    children {
        id name { constructor, mandatory },
        id type_reference,
        itravdata next
    },

    attributes {
        attribute_type type,
        string include_file
    }
};

node attribute {
    children {
        id name {mandatory },
        id type_reference,
        attribute next
    },

    attributes {
        attribute_type type,
        int in_constructor
    }
};

node ienum {
    children {
        id vals {constructor},
        id name {constructor},
        id iprefix {constructor},
        ienum next
    },

    attributes {
        string iinfo { constructor }
    }
};

node id {
    children {
        id next
    },

    attributes {
        string orig { constructor },
        string lwr { constructor },
        string upr { constructor },
        int row,
        int col_begin,
        int col_end
    }
};
