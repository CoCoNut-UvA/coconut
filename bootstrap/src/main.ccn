
start phase startPhase {
    info = "The starting point"
    prefix = RT

    actions {
        pass scanAndParse;
        print;
    }
};

traversal print {
    info = "Print the ast"
    prefix = PRT
    travdata = {
        int indent
    }
};


root node ast {
    children {
        iphase iphases;
        itraversal itraversals;
        ipass ipasses;
        inode inodes;
    }
};

nodeset action = { iphase, itraversal, ipass};

node iactions {
    children {
        action action {constructor};
        iactions next;
    }
};

node iphase {
    children {
        iactions iactions;
        iphase next;
    }
    attributes {
        id name { constructor };
        int is_start { constructor };
        int is_cycle {};
        string iinfo {};
        id iprefix {};
        id gate_func {};
    }
};

node itraversal {
    children {
        itraversal next;
        inode inodes;
    }
    attributes {
        id name { constructor };
        string iinfo {};
        id iprefix {};

    }
};

node ipass {
    children {
        ipass next;
    }
    attributes {
        id name { constructor };
        string iifno { constructor };
        id iprefix { constructor };
        id target_func {};
    }
};

node inode {
    children {
        inode next;
        child ichildren;
        attribute iattributes;
    }

    attributes {
        id name { constructor };
        string iifno { constructor };
        int is_root {};
    }
};

node inodeset {
    children {
        inode inodes;
    }
    attributes {
        id name {};
        string iinfo {};
    }
};

enum child_type {
    prefix = CT
    values = {
        inode, inodeset
    }
};

node child {
    children {
        child next;
    }

    attributes {
        id name { constructor };
        id type_reference {};
        child_type type {};
        int in_constructor {};
        int is_mandatory {};
    }
};

enum attribute_type {
    prefix = AT
    values = {
        link, link_or_enum, iint, istring, ibool
    }
};

enum setoperation_type {
    prefix = SO
    values = {
        iunion, intersect, difference
    }
};

node setoperation {
    children {
        setexpr left {constructor};
        setexpr right {constructor};
    }
    attributes {
        setoperation_type type { constructor };
    }
};

node setliteral {
    attributes {
        id literal {constructor};
    }
};

nodeset setexpr = {setoperation, setliteral, id};

node attribute {
    children {
        attribute next;
    }
    attributes {
        id type_reference {};
        attribute_type type {};
        string include_file {};
        int in_constructor {};
    }
};

node id {
    children {
        id next {};
    }
    attributes {
        string orig { constructor };
        string lwr { constructor };
        string upr { constructor };
    }
};
